import warnings

import joblib
import pandas as pd


def _safe_encode(values, encoder, unknown_token="Unknown"):
    mapping = {label: idx for idx, label in enumerate(encoder.classes_)}

    if unknown_token not in mapping:
        raise ValueError(
            f"Encoder does not contain the required fallback token '{unknown_token}'."
        )

    series = pd.Series(values)
    encoded = series.map(mapping)

    if encoded.isna().any():
        unknown_values = series[encoded.isna()].unique()
        warnings.warn(
            "Encountered categories unknown to the encoder during prediction: "
            f"{list(unknown_values)}. Falling back to '{unknown_token}'."
        )
        encoded = encoded.fillna(mapping[unknown_token])

    return encoded.astype(int)


clf = joblib.load('exploit_model.pkl')
le_vuln = joblib.load('le_vuln.pkl')
le_sev = joblib.load('le_sev.pkl')
le_user = joblib.load('le_user.pkl')
le_label = joblib.load('le_label.pkl')

findings = pd.DataFrame([
    {'vuln_type': 'hardcoded_secret', 'severity': 'HIGH', 'user_input': 'No'},
    {'vuln_type': 'eval', 'severity': 'HIGH', 'user_input': 'Yes'},
    {'vuln_type': 'subprocess_call', 'severity': 'HIGH', 'user_input': 'Yes'}
])

findings['vuln_type_enc'] = _safe_encode(findings['vuln_type'], le_vuln)
findings['severity_enc'] = _safe_encode(findings['severity'], le_sev)
findings['user_input_enc'] = _safe_encode(findings['user_input'], le_user)

X_pred = findings[['vuln_type_enc', 'severity_enc', 'user_input_enc']]
preds_enc = clf.predict(X_pred)
findings['predicted_exploitability'] = le_label.inverse_transform(preds_enc)

print(findings[['vuln_type', 'severity', 'user_input', 'predicted_exploitability']])
